package com.promineotech.jeep.dao;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.RowMapperResultSetExtractor;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import com.promineotech.jeep.entity.Jeep;
import com.promineotech.jeep.entity.JeepModel;

import lombok.extern.slf4j.Slf4j;
@Component 
@Slf4j //this annotation is used when I want to make a logging statement 
public class DefaultJeepSalesDao implements JeepSalesDao {

	@Autowired //auto wire inject a named parameter jdbc template
	private NamedParameterJdbcTemplate jdbcTemplate;
	
	@Override
	public List<Jeep> fetchJeeps(JeepModel model, String trim) {
		log.debug("DAO: model={}, trim={}", model, trim);
		//formatter:off
		String sql = ""
				+"SELECT * "
				+"FROM models "
				+"WHERE model_id = :model_id AND trim_level = :trim_level";
		//@formatter:on
		
		Map<String, Object> params = new HashMap<>();
		params.put("model_id", model.toString()); // the second part is the parameter in this case it is 
		params.put("trim_level", trim);//either model or trim
		//The key should be the same as the colon name (:model_id of :trom_level)
		return jdbcTemplate.query(sql,  params, new RowMapper<>() {

			@Override
			public Jeep mapRow(ResultSet rs, int rowNum) throws SQLException {
				// formatter:off
				//return Jeep.builder()//get a value back from the result set
						.basePrice(new BigDecimal(rs.getString("base_price")))
						.modelId(JeepModel.valueOf(rs.getString("model_id")))
//since model Id is a JeepModel which is an enum you use .valueof to load an enum value baseprice is a bigDecimal so you do not need to do it there
						.modelPK(rs.getLong("model_PK"))
						.numDoors(rs.getInt("num_doors"))
						.trimLevel(rs.getString("trim_level"))
						.wheelSize(rs.getInt("wheel_size"))
						.build();
				
				//formatter:on
			}});
	}

}
