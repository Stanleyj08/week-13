package com.promineotech.jeep.controller;

import static org.junit.jupiter.api.Assertions.*;

import org.apache.catalina.loader.ResourceEntry;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.HttpEntity;
import org.springframework.http.ResponseEntity;
//import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;

import com.promineotech.jeep.entity.Order;
//import org.springframework.http.ResponseEntity;
import io.swagger.v3.oas.models.PathItem.HttpMethod;
import lombok.Getter;
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT) 
@ActiveProfiles("test") 
@Sql(scripts = { //active profile is test so it will load up the h2 db
    "classpath:flyway/migrations/V1.0__Jeep_Schema.sql", //and we point to our scripts with @Sql
    "classpath:flyway/migrations/V1.1__Jeep_Data.sql"},  

    config = @SqlConfig(encoding = "utf-8")) 
class CreateOrderTest extends CreateOrderTestSupport{
	@LocalServerPort
	private int serverPort;
	
	@Autowired
	@Getter
	private TestRestTemplate restTemplate;
	/**
	 * @return
	 */
	
	@Test
	void testCreateOrderReturnsSuccess201() {
	//Given: an order as JSON
		String body = createOrderBody();
		String uri = getBaseUriForOrders();//the responseentity takes an httpentity as a param
		HttpEntity<String> bodyEntity = new HttpEntity<>(body);
		//When: the order is sent// you can pass the body into the entity by typing body like so
		ResponseEntity<?> response = getRestTemplate().exchange(uri, HttpMethod.POST, bodyEntity, Object.class);
		//then: a 201 status is returned 	// when we create we use Post not get
		
		//and: the returned order is correct
	}

	//}

	//protected String getBaseUriForOrders() {
		//return String.format("http:localhost:%d/orders", serverPort);
		
	//}



}
